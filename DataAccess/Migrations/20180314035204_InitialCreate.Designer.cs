// <auto-generated />
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace DataAccess.Migrations
{
    [DbContext(typeof(imdbContext))]
    [Migration("20180314035204_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccess.Entities.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AssociatedMediaMediaId");

                    b.Property<string>("Description");

                    b.Property<string>("MediaIMDBId");

                    b.HasKey("GenreId");

                    b.HasIndex("AssociatedMediaMediaId");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("DataAccess.Entities.Media", b =>
                {
                    b.Property<int>("MediaId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("MediaIMDBId");

                    b.Property<int?>("RatingMediaRatingId");

                    b.Property<int?>("endYear");

                    b.Property<bool?>("isAdult");

                    b.Property<string>("originalTitle");

                    b.Property<string>("primaryTitle");

                    b.Property<int?>("runtimeMinutes");

                    b.Property<int?>("startYear");

                    b.Property<string>("titleType");

                    b.HasKey("MediaId");

                    b.HasIndex("RatingMediaRatingId")
                        .IsUnique()
                        .HasFilter("[RatingMediaRatingId] IS NOT NULL");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("DataAccess.Entities.MediaRating", b =>
                {
                    b.Property<int>("MediaRatingId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AverageRating");

                    b.Property<string>("MediaIMDBId");

                    b.Property<long>("NumVotes");

                    b.HasKey("MediaRatingId");

                    b.ToTable("MediaRating");
                });

            modelBuilder.Entity("DataAccess.Entities.Principal", b =>
                {
                    b.Property<int>("PrincipalId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AssociatedMediaMediaId");

                    b.Property<string>("Category");

                    b.Property<string>("Characters");

                    b.Property<string>("Job");

                    b.Property<string>("MediaIMDBId");

                    b.Property<int?>("Ordering");

                    b.Property<int?>("StaffId");

                    b.Property<string>("imdbStaffId");

                    b.HasKey("PrincipalId");

                    b.HasIndex("AssociatedMediaMediaId");

                    b.HasIndex("StaffId");

                    b.ToTable("Principal");
                });

            modelBuilder.Entity("DataAccess.Entities.Profession", b =>
                {
                    b.Property<int>("ProfessionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AssociatedStaffStaffId");

                    b.Property<string>("Description");

                    b.Property<string>("imdbStaffId");

                    b.HasKey("ProfessionId");

                    b.HasIndex("AssociatedStaffStaffId");

                    b.ToTable("Profession");
                });

            modelBuilder.Entity("DataAccess.Entities.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BirthYear");

                    b.Property<int?>("DeathYear");

                    b.Property<int?>("MediaId");

                    b.Property<string>("PrimaryName");

                    b.Property<string>("imdbStaffId");

                    b.HasKey("StaffId");

                    b.HasIndex("MediaId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("DataAccess.Entities.StaffMediaLink", b =>
                {
                    b.Property<int>("StaffMediaLinkId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AssociatedMediaMediaId");

                    b.Property<int?>("AssociatedStaffStaffId");

                    b.Property<string>("MediaIMDBId");

                    b.Property<string>("imdbStaffId");

                    b.HasKey("StaffMediaLinkId");

                    b.HasIndex("AssociatedMediaMediaId");

                    b.HasIndex("AssociatedStaffStaffId");

                    b.ToTable("StaffMediaLink");
                });

            modelBuilder.Entity("DataAccess.Entities.Genre", b =>
                {
                    b.HasOne("DataAccess.Entities.Media", "AssociatedMedia")
                        .WithMany("Genres")
                        .HasForeignKey("AssociatedMediaMediaId");
                });

            modelBuilder.Entity("DataAccess.Entities.Media", b =>
                {
                    b.HasOne("DataAccess.Entities.MediaRating", "Rating")
                        .WithOne("AssociatedMedia")
                        .HasForeignKey("DataAccess.Entities.Media", "RatingMediaRatingId");
                });

            modelBuilder.Entity("DataAccess.Entities.Principal", b =>
                {
                    b.HasOne("DataAccess.Entities.Media", "AssociatedMedia")
                        .WithMany()
                        .HasForeignKey("AssociatedMediaMediaId");

                    b.HasOne("DataAccess.Entities.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId");
                });

            modelBuilder.Entity("DataAccess.Entities.Profession", b =>
                {
                    b.HasOne("DataAccess.Entities.Staff", "AssociatedStaff")
                        .WithMany("primaryProfession")
                        .HasForeignKey("AssociatedStaffStaffId");
                });

            modelBuilder.Entity("DataAccess.Entities.Staff", b =>
                {
                    b.HasOne("DataAccess.Entities.Media")
                        .WithMany("Staff")
                        .HasForeignKey("MediaId");
                });

            modelBuilder.Entity("DataAccess.Entities.StaffMediaLink", b =>
                {
                    b.HasOne("DataAccess.Entities.Media", "AssociatedMedia")
                        .WithMany()
                        .HasForeignKey("AssociatedMediaMediaId");

                    b.HasOne("DataAccess.Entities.Staff", "AssociatedStaff")
                        .WithMany("KnownForTitles")
                        .HasForeignKey("AssociatedStaffStaffId");
                });
#pragma warning restore 612, 618
        }
    }
}
